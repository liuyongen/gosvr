package server

import (
	"Pchat/internal/server/conf"
	"Pchat/internal/server/model"
	"fmt"
	"net"

	"go.uber.org/zap"

	"gogit.oa.com/March/gopkg/util"

	"gogit.oa.com/March/gopkg/protocol/bypack"
)

var LocalCmds = []string{
	"TCP0x881",
	"TCP0x888",
	"UDP0x103",
	"UDP0x104",
	"TCP0x109",
	"UDP0x10E",
	"UDP0x10F",
	"TCP0x110",
	"TCP0x887",
	"TCP0x886",
}

var LoginCmds = []string{
	"TCP0x2",
	"TCP0x103",
	"TCP0x104",
	"TCP0x105",
	"TCP0x106",
	"TCP0x107",
	"TCP0x108",
}

type Worker struct {
	conn   net.Conn
	addr   net.Addr
	reader *bypack.Reader
	user   *model.User
}

func NewWorker(addr net.Addr, reader *bypack.Reader) *Worker {
	return &Worker{
		addr:   addr,
		reader: reader,
	}
}

func NewWorkerWithConn(conn net.Conn, reader *bypack.Reader) *Worker {
	return &Worker{
		conn:   conn,
		reader: reader,
		addr:   conn.RemoteAddr(),
	}
}

func (w *Worker) PreAction(method string) error {
	for _, v := range LocalCmds {
		if v == method {
			if !w.IsLocal() {
				return fmt.Errorf("only for local")
			}
		}
	}

	for _, v := range LoginCmds {
		if v == method {
			if !w.IsLogin() {
				return fmt.Errorf("need login before")
			}
		}
	}

	return nil
}

func (w *Worker) IsLogin() (ok bool) {
	w.user, ok = model.GetUserWithConn(w.conn)
	return ok
}

func (w *Worker) IsLocal() bool {
	if w.addr == nil {
		return false
	}
	return util.IsLocal(w.addr)
}

func (w *Worker) send(data []byte) {
	send(w.conn, data)
}

// 接收客户端发心跳 10s
func (w *Worker) TCP0x2() error {
	w.user.Heartbeat()
	return nil
}

// 登录
func (w *Worker) TCP0x101() error {
	var mid = w.reader.Int()
	if mid <= 0 {
		return fmt.Errorf("invalid mid %d login", mid)
	}
	conf.L.Info("user login", logField(w.conn), zap.Int32("mid", mid))

	// 已登录
	midTmp, ok := model.GetMid(w.conn)
	if ok && mid != midTmp {
		model.DelMid(w.conn)
		return fmt.Errorf("conn is aleady login")
	}

	model.AddMid(w.conn, mid)

	source := w.reader.Short()
	friends := getIdsByReader(w.reader, 100) // 客户端其实不会传了

	user, ok := model.GetUser(mid)
	if !ok {
		user = model.NewUser(w.conn, mid)
	}

	user.Conn = w.conn
	user.Source = source
	user.Friends = friends

	w.send(model.BufferLoginSuccess)
	conf.L.Info("login success", logField(w.conn), zap.Int32("mid", mid))
	return nil
}

// 退出
// 原有小喇叭没有处理，但有接收请求
// 加上退出桌子操作
func (w *Worker) TCP0x102() error {
	return nil
}

// 对单用户
func (w *Worker) TCP0x103() error {
	return w.x103()
}

// 对单用户
// FIXME 客户端貌似有问题
func (w *Worker) UDP0x103() error {
	return w.x103()
}

func (w *Worker) x103() error {
	w.reader.Int()
	toMid := w.reader.Int()
	user, ok := model.GetUser(toMid)
	if !ok || user == nil {
		return fmt.Errorf("user %d not found", toMid)
	}

	conf.L.Debug(fmt.Sprintf("send to mid: %d data: %s", toMid, w.reader.String()), logField(w.conn))
	user.Send(w.reader.RawBuffer)

	return nil
}

// 广播所有人
func (w *Worker) TCP0x104() error {
	return w.x104(false)
}

// 广播所有人
func (w *Worker) UDP0x104() error {
	return w.x104(true)
}

func (w *Worker) x104(isUdp bool) error {
	buff := w.reader.RawBuffer
	var source int16 = 2

	if isUdp {
		source = w.reader.Short()
		str := w.reader.String()

		w := bypack.NewWriter(0x104)
		w.String(str)
		w.End()
		buff = w.GetBuffer()
	}

	users := model.GetUsersWithSource(source)
	for _, v := range users {
		go v.Send(buff)
	}

	return nil
}

// 广播所有好友
// NOTE 好友在登录时传过来
func (w *Worker) TCP0x105() error {
	w.reader.Int()
	if len(w.user.Friends) == 0 {
		return nil
	}

	for _, v := range w.user.Friends {
		u, ok := model.GetUser(v)
		if !ok {
			continue
		}

		go u.Send(w.reader.RawBuffer)
	}

	return nil
}

// 进入房间
func (w *Worker) TCP0x106() error {
	w.reader.Int()
	tid := w.reader.Int()
	w.user.EnterTable(tid)

	return nil
}

// 退出房间
func (w *Worker) TCP0x107() error {
	w.reader.Int()
	w.user.ExitTable()

	return nil
}

// 设置坐下状态 0 站起 1 坐下
// FIXME 客户端的逻辑有误
func (w *Worker) TCP0x108() error {
	play := w.reader.Short()
	w.user.UpdatePlay(play)

	return nil
}

// 在线人数
func (w *Worker) TCP0x109() error {
	w.send(model.GetBufferOnlineNum())
	return nil
}

// 从 PHP 发出加密单播 推 JS
func (w *Worker) UDP0x10E() error {
	mid := w.reader.Int()
	key := w.reader.String()
	if key != conf.Conf.Keys.Udp0x10e {
		return fmt.Errorf("invalid key %s", key)
	}

	data := w.reader.String()
	user, ok := model.GetUser(mid)
	if !ok {
		return fmt.Errorf("user %d not found data %s", mid, data)
	}
	user.Send(model.GetBufferJS(data))

	return nil
}

// 从 PHP 发出全桌广播 推 JS
func (w *Worker) UDP0x10F() error {
	tid := w.reader.Int()
	key := w.reader.String()
	if tid == 0 || key != conf.Conf.Keys.Udp0x10f {
		return fmt.Errorf("invalid key %s", key)
	}

	play := w.reader.Short()
	data := w.reader.String()

	table := model.GetTable(tid)
	var i int
	table.Users.Range(func(key, value interface{}) bool {
		user := value.(*model.User)
		if play == model.PlayAll || play == user.Play {
			go user.Send(model.GetBufferJS(data))
		}

		i++
		if i > 200 {
			return false
		}
		return true
	})

	return nil
}

// 批量获取 ID 在线状态 支持一次最多1000个 ID
func (w *Worker) TCP0x110() error {
	writer := bypack.NewWriter(0x110)

	mids := getIdsByReader(w.reader, 1000)
	conf.L.Debug(fmt.Sprintf("mids %v", mids), logField(w.conn))

	for _, v := range mids {
		writer.Int(v)

		var status byte = 0 // 0 离线 1 大厅 2 旁观 3 在玩
		user, ok := model.GetUser(v)
		if !ok || user.Conn == nil {
			writer.Byte(status)
			continue
		}

		if user.Table == nil {
			status = 1
		} else {
			status = 2
			if user.Play == model.PlaySit {
				status = 3
			}
		}

		writer.Byte(status)
	}

	writer.End()
	w.send(writer.GetBuffer())

	return nil
}
